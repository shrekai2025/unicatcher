'use client';

import { useState, useEffect } from 'react';
import { DashboardLayout } from '~/components/dashboard-layout';

interface TweetInfo {
  id: string;
  content: string;
  userNickname: string;
  userUsername: string;
  profileImageUrl: string | null;
  tweetUrl: string;
  publishedAtFormatted: string;

  // 翻译相关
  translatedContent: string | null;
  isTranslated: boolean;
  originalLanguage: string | null;

  // 统计数据
  replyCount: number;
  retweetCount: number;
  likeCount: number;
  viewCount: number;

  // 评论相关
  commentCount: number;
  recentComments: any[];
}

interface AIConfig {
  apiKey: string;
  provider: 'openai' | 'openai-badger' | 'zhipu';
  model: string;
  baseURL?: string;
}

interface ProcessTask {
  id: string;
  tweetUrl: string;
  tweetId: string;
  status: 'processing' | 'completed' | 'failed';
  startTime: string;

  // 翻译状态
  translationStatus: 'pending' | 'processing' | 'completed' | 'failed';
  translationResult?: any;

  // 推特评论爬取状态（第一阶段）
  crawlCommentsStatus: 'pending' | 'processing' | 'completed' | 'failed';
  crawlCommentsResult?: any;

  // AI生成评论状态（第二阶段）
  generateCommentsStatus: 'pending' | 'processing' | 'completed' | 'failed';
  generateCommentsResult?: any;

  tweetInfo?: TweetInfo;
  error?: string;
}

export default function XHelperPage() {
  // 客户端挂载状态
  const [mounted, setMounted] = useState(false);

  // 基本状态
  const [tweetUrl, setTweetUrl] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [currentTask, setCurrentTask] = useState<ProcessTask | null>(null);

  // AI配置状态
  const [showAIConfig, setShowAIConfig] = useState(false);
  const [translationAIConfig, setTranslationAIConfig] = useState<AIConfig>({
    apiKey: '',
    provider: 'zhipu',
    model: 'glm-4.5-flash'
  });

  const [commentAIConfig, setCommentAIConfig] = useState<AIConfig>({
    apiKey: '',
    provider: 'zhipu',
    model: 'glm-4.5-flash'
  });

  // 任务历史
  const [taskHistory, setTaskHistory] = useState<ProcessTask[]>([]);

  // 恢复状态提示
  const [recoveryStatus, setRecoveryStatus] = useState<string | null>(null);

  // 客户端挂载后加载localStorage数据
  useEffect(() => {
    setMounted(true);

    // 加载翻译AI配置
    const savedTranslationConfig = localStorage.getItem('x-helper-translation-ai-config');
    if (savedTranslationConfig) {
      try {
        setTranslationAIConfig(JSON.parse(savedTranslationConfig));
      } catch (e) {
        console.warn('翻译AI配置解析失败:', e);
      }
    }

    // 加载评论AI配置
    const savedCommentConfig = localStorage.getItem('x-helper-comment-ai-config');
    if (savedCommentConfig) {
      try {
        setCommentAIConfig(JSON.parse(savedCommentConfig));
      } catch (e) {
        console.warn('评论AI配置解析失败:', e);
      }
    }

    // 加载任务历史
    const savedTaskHistory = localStorage.getItem('x-helper-task-history');
    if (savedTaskHistory) {
      try {
        const tasks = JSON.parse(savedTaskHistory);
        // 检查是否有未完成的任务需要恢复
        checkAndRecoverUnfinishedTasks(tasks);
        setTaskHistory(tasks);
      } catch (e) {
        console.warn('任务历史解析失败:', e);
      }
    }
  }, []);

  // 保存配置到localStorage
  const saveAIConfigs = () => {
    if (mounted) {
      localStorage.setItem('x-helper-translation-ai-config', JSON.stringify(translationAIConfig));
      localStorage.setItem('x-helper-comment-ai-config', JSON.stringify(commentAIConfig));
    }
    setShowAIConfig(false);
  };

  // 保存任务历史到localStorage
  useEffect(() => {
    if (mounted) {
      localStorage.setItem('x-helper-task-history', JSON.stringify(taskHistory));
    }
  }, [taskHistory, mounted]);

  // 处理推文
  const handleProcessTweet = async () => {
    console.log('[X Helper] 开始处理推文:', tweetUrl);

    if (!tweetUrl.trim()) {
      alert('请输入推文URL');
      return;
    }

    if (!translationAIConfig.apiKey || !commentAIConfig.apiKey) {
      console.log('[X Helper] AI配置检查失败 - 翻译配置:', !!translationAIConfig.apiKey, '评论配置:', !!commentAIConfig.apiKey);
      alert('请先配置AI服务');
      setShowAIConfig(true);
      return;
    }

    console.log('[X Helper] AI配置检查通过，开始处理');
    setIsProcessing(true);

    try {
      // 第1步：解析URL
      console.log('[X Helper] 步骤1: 解析URL -', tweetUrl);
      const parseResponse = await fetch('/api/tweet-processor/parse-url', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: tweetUrl })
      });

      console.log('[X Helper] URL解析响应状态:', parseResponse.status);
      const parseResult = await parseResponse.json();
      console.log('[X Helper] URL解析结果:', parseResult);

      if (!parseResult.success) {
        throw new Error(parseResult.error?.message || 'URL解析失败');
      }

      const tweetId = parseResult.data.tweetId;
      console.log('[X Helper] 提取的推文ID:', tweetId);

      // 创建任务记录
      const newTask: ProcessTask = {
        id: Date.now().toString(),
        tweetUrl: tweetUrl,
        tweetId: tweetId,
        status: 'processing',
        startTime: new Date().toLocaleString('zh-CN'),
        translationStatus: 'pending',
        crawlCommentsStatus: 'pending',
        generateCommentsStatus: 'pending'
      };

      setCurrentTask(newTask);
      setTaskHistory(prev => [newTask, ...prev.slice(0, 9)]); // 保留最近10条

      // 第2步：获取或爬取推文信息
      console.log('[X Helper] 步骤2: 获取推文信息 -', tweetId);
      let tweetInfoResult = await fetchTweetInfo(tweetId);

      // 如果推文不在数据库中，尝试爬取
      if (!tweetInfoResult.success && tweetInfoResult.error?.code === 'NOT_FOUND') {
        console.log('[X Helper] 推文不在数据库中，尝试爬取推文数据');

        // 尝试爬取推文数据
        const updateResult = await crawlTweetData(tweetId);
        if (updateResult.success) {
          // 等待爬取完成后再次获取
          const pollResult = await pollTaskStatus(updateResult.data.taskId);
          if (pollResult.success) {
            console.log('[X Helper] 推文爬取成功，再次获取推文信息');
            tweetInfoResult = await fetchTweetInfo(tweetId);
          }
        }
      }

      if (tweetInfoResult.success) {
        console.log('[X Helper] 推文信息获取成功');
        newTask.tweetInfo = tweetInfoResult.data;
        setCurrentTask({ ...newTask });
      } else {
        console.log('[X Helper] 推文信息获取失败，但继续执行');
        // 如果依然没有推文内容，我们将无法进行翻译，但仍然可以尝试评论爬取
      }

      // 第3步：并行执行翻译和获取评论
      console.log('[X Helper] 步骤3: 开始并行处理翻译和评论获取');
      const promises: Promise<any>[] = [];

      // 翻译任务
      console.log('[X Helper] 步骤3a: 开始翻译处理');
      console.log('[X Helper] 翻译内容:', newTask.tweetInfo?.content || '');
      console.log('[X Helper] 翻译AI配置:', { provider: translationAIConfig.provider, model: translationAIConfig.model, hasApiKey: !!translationAIConfig.apiKey });
      newTask.translationStatus = 'processing';
      setCurrentTask({ ...newTask });

      promises.push(
        fetch('/api/tweet-processor/translate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            content: newTask.tweetInfo?.content || '',
            aiConfig: translationAIConfig
          })
        }).then(res => {
          console.log('[X Helper] 翻译API响应状态:', res.status);
          return res.json();
        }).then(result => {
          console.log('[X Helper] 翻译API结果:', result);
          if (result.success) {
            console.log('[X Helper] 翻译成功:', result.data?.translatedContent?.substring(0, 100) + '...');
            newTask.translationStatus = 'completed';
            newTask.translationResult = result.data;
          } else {
            console.log('[X Helper] 翻译失败:', result.error?.message);
            newTask.translationStatus = 'failed';
            newTask.error = result.error?.message;
          }
          return { type: 'translation', result };
        }).catch(error => {
          console.error('[X Helper] 翻译请求异常:', error);
          newTask.translationStatus = 'failed';
          newTask.error = error.message;
          return { type: 'translation', error: error.message };
        })
      );

      // 评论获取任务
      console.log('[X Helper] 步骤3b: 开始评论爬取处理');
      console.log('[X Helper] 爬取推文ID:', tweetId);
      newTask.commentsStatus = 'processing';
      setCurrentTask({ ...newTask });

      promises.push(
        fetch('/api/tweet-processor/crawl-comments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
'x-api-key': 'unicatcher-api-key-2024'
          },
          body: JSON.stringify({
            tweetId: tweetId,
            incremental: false,
            maxScrolls: 10
          })
        }).then(res => {
          console.log('[X Helper] 评论爬取API响应状态:', res.status);
          return res.json();
        }).then(result => {
          console.log('[X Helper] 评论爬取API结果:', result);
          if (result.success) {
            console.log('[X Helper] 评论爬取任务创建成功，任务ID:', result.data.taskId);
            // 轮询任务状态
            return pollTaskStatus(result.data.taskId).then(taskResult => {
              console.log('[X Helper] 评论爬取任务完成，结果:', taskResult);
              if (taskResult.success) {
                console.log('[X Helper] 评论爬取成功，获取到评论数:', taskResult.data?.totalComments || 0);
                newTask.commentsStatus = 'completed';
                newTask.commentsResult = taskResult.data;

                // 生成评论
                console.log('[X Helper] 开始生成评论');
                return generateComments(tweetId, newTask.tweetInfo?.content || '');
              } else {
                console.log('[X Helper] 评论爬取任务失败:', taskResult.error?.message);
                newTask.commentsStatus = 'failed';
                newTask.error = taskResult.error?.message;
                return { type: 'comments', result: taskResult };
              }
            });
          } else {
            console.log('[X Helper] 评论爬取API调用失败:', result.error?.message);
            newTask.commentsStatus = 'failed';
            newTask.error = result.error?.message;
            return { type: 'comments', result };
          }
        }).catch(error => {
          console.error('[X Helper] 评论爬取请求异常:', error);
          newTask.commentsStatus = 'failed';
          newTask.error = error.message;
          return { type: 'comments', error: error.message };
        })
      );

      // 等待所有任务完成
      console.log('[X Helper] 步骤4: 等待所有任务完成');
      const results = await Promise.allSettled(promises);
      console.log('[X Helper] 所有任务完成，结果:', results);

      // 更新最终状态
      newTask.status = 'completed';
      console.log('[X Helper] 任务最终状态:', {
        id: newTask.id,
        tweetId: newTask.tweetId,
        translationStatus: newTask.translationStatus,
        commentsStatus: newTask.commentsStatus,
        error: newTask.error
      });
      setCurrentTask({ ...newTask });
      setTaskHistory(prev => [newTask, ...prev.slice(1)]);

    } catch (error: any) {
      console.error('[X Helper] 整体处理失败:', error);
      const failedTask: ProcessTask = {
        id: Date.now().toString(),
        tweetUrl: tweetUrl,
        tweetId: '',
        status: 'failed',
        startTime: new Date().toLocaleString('zh-CN'),
        translationStatus: 'failed',
        commentsStatus: 'failed',
        error: error.message
      };

      console.log('[X Helper] 创建失败任务记录:', failedTask);
      setCurrentTask(failedTask);
      setTaskHistory(prev => [failedTask, ...prev.slice(0, 9)]);
    } finally {
      console.log('[X Helper] 处理结束，设置isProcessing为false');
      setIsProcessing(false);
    }
  };

  // 轮询任务状态
  const pollTaskStatus = async (taskId: string): Promise<any> => {
    console.log('[X Helper] 开始轮询任务状态，任务ID:', taskId);
    let attempts = 0;
    const maxAttempts = 30; // 最多30次，总共约1分钟

    while (attempts < maxAttempts) {
      try {
        console.log(`[X Helper] 轮询尝试 ${attempts + 1}/${maxAttempts}`);
        const response = await fetch(`/api/tweet-processor/status/${taskId}`, {
          headers: { 'x-api-key': process.env.NEXT_PUBLIC_API_KEY || 'unicatcher-api-key-demo' }
        });

        console.log('[X Helper] 任务状态查询响应状态:', response.status);
        const result = await response.json();
        console.log('[X Helper] 任务状态查询结果:', result);

        if (result.success && result.data.status === 'completed') {
          console.log('[X Helper] 任务状态轮询完成，任务成功');
          return { success: true, data: result.data.result };
        } else if (result.data.status === 'failed') {
          console.log('[X Helper] 任务状态轮询完成，任务失败:', result.data.errorMessage);
          return { success: false, error: { message: result.data.errorMessage } };
        }

        console.log(`[X Helper] 任务状态: ${result.data.status}，继续轮询`);
        // 继续轮询
        await new Promise(resolve => setTimeout(resolve, 2000));
        attempts++;
      } catch (error) {
        console.error('[X Helper] 轮询任务状态异常:', error);
        attempts++;
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    console.log('[X Helper] 任务状态轮询超时');
    return { success: false, error: { message: '任务超时' } };
  };

  // 获取推文信息
  const fetchTweetInfo = async (tweetId: string) => {
    try {
      const response = await fetch(`/api/tweet-processor/tweet-info/${tweetId}`);
      console.log('[X Helper] 推文信息响应状态:', response.status);
      const result = await response.json();
      console.log('[X Helper] 推文信息结果:', result);
      return result;
    } catch (error) {
      console.error('[X Helper] 获取推文信息异常:', error);
      return { success: false, error: { message: '网络错误' } };
    }
  };

  // 爬取推文数据
  const crawlTweetData = async (tweetId: string) => {
    try {
      console.log('[X Helper] 开始爬取推文数据:', tweetId);
      const response = await fetch('/api/tweet-processor/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': process.env.NEXT_PUBLIC_API_KEY || 'unicatcher-api-key-demo'
        },
        body: JSON.stringify({
          tweetId: tweetId,
          force: false
        })
      });

      console.log('[X Helper] 推文爬取API响应状态:', response.status);
      const result = await response.json();
      console.log('[X Helper] 推文爬取API结果:', result);
      return result;
    } catch (error) {
      console.error('[X Helper] 爬取推文数据异常:', error);
      return { success: false, error: { message: '网络错误' } };
    }
  };

  // 生成评论
  const generateComments = async (tweetId: string, content: string) => {
    console.log('[X Helper] 开始生成评论');
    console.log('[X Helper] 生成评论参数:', { tweetId, content: content.substring(0, 100) + '...', aiConfig: { provider: commentAIConfig.provider, model: commentAIConfig.model, hasApiKey: !!commentAIConfig.apiKey } });

    try {
      const response = await fetch('/api/tweet-processor/generate-comments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          tweetId,
          systemPrompt: '',
          includeExistingComments: true,
          commentCount: 3,
          commentLength: 'medium',
          language: 'zh-CN',
          aiConfig: commentAIConfig
        })
      });

      console.log('[X Helper] 生成评论API响应状态:', response.status);
      const result = await response.json();
      console.log('[X Helper] 生成评论API结果:', result);

      if (result.success && currentTask) {
        console.log('[X Helper] 评论生成成功，生成数量:', result.data?.comments?.length || 0);
        console.log('[X Helper] 评论生成详细数据:', result.data);
        console.log('[X Helper] 评论数组:', result.data?.comments);
        // 为了保持前端一致性，将comments重命名为generatedComments
        currentTask.generatedCommentsResult = {
          ...result.data,
          generatedComments: result.data?.comments || []
        };
        setCurrentTask({ ...currentTask });
      } else {
        console.log('[X Helper] 评论生成失败:', result.error?.message);
        console.log('[X Helper] 完整错误信息:', result);
      }

      return result;
    } catch (error) {
      console.error('[X Helper] 生成评论异常:', error);
      return { success: false, error: { message: '生成评论失败' } };
    }
  };

  // 检查并恢复未完成的任务
  const checkAndRecoverUnfinishedTasks = async (tasks: ProcessTask[]) => {
    console.log('[X Helper] 检查未完成的任务');

    const unfinishedTasks = tasks.filter(task =>
      task.status === 'processing' &&
      (task.translationStatus === 'processing' || task.commentsStatus === 'processing')
    );

    if (unfinishedTasks.length > 0) {
      console.log(`[X Helper] 发现 ${unfinishedTasks.length} 个未完成的任务，开始恢复状态`);

      for (const task of unfinishedTasks) {
        // 检查任务开始时间，如果超过10分钟则标记为失败
        const taskStartTime = new Date(task.startTime).getTime();
        const now = Date.now();
        const timeDiff = now - taskStartTime;
        const timeoutThreshold = 10 * 60 * 1000; // 10分钟

        if (timeDiff > timeoutThreshold) {
          console.log(`[X Helper] 任务 ${task.id} 超时，标记为失败`);
          task.status = 'failed';
          task.error = '任务超时（页面关闭导致）';
          if (task.translationStatus === 'processing') {
            task.translationStatus = 'failed';
          }
          if (task.commentsStatus === 'processing') {
            task.commentsStatus = 'failed';
          }
        } else {
          // 尝试恢复任务状态
          console.log(`[X Helper] 尝试恢复任务 ${task.id} 的状态`);
          await recoverTaskStatus(task);
        }
      }

      // 更新任务历史
      localStorage.setItem('x-helper-task-history', JSON.stringify(tasks));
    }
  };

  // 恢复单个任务的状态
  const recoverTaskStatus = async (task: ProcessTask) => {
    try {
      // 重新获取推文信息看是否已经更新
      if (task.tweetId) {
        const tweetInfoResult = await fetchTweetInfo(task.tweetId);
        if (tweetInfoResult.success && !task.tweetInfo) {
          task.tweetInfo = tweetInfoResult.data;
        }
      }

      // 检查翻译状态
      if (task.translationStatus === 'processing') {
        if (task.tweetInfo?.translatedContent) {
          console.log(`[X Helper] 任务 ${task.id} 的翻译已完成`);
          task.translationStatus = 'completed';
          task.translationResult = {
            translatedContent: task.tweetInfo.translatedContent,
            originalLanguage: task.tweetInfo.originalLanguage
          };
        } else {
          console.log(`[X Helper] 任务 ${task.id} 的翻译未完成，标记为失败`);
          task.translationStatus = 'failed';
        }
      }

      // 检查评论状态 - 这里比较复杂，暂时标记为需要手动重试
      if (task.commentsStatus === 'processing') {
        console.log(`[X Helper] 任务 ${task.id} 的评论处理未完成，标记为失败`);
        task.commentsStatus = 'failed';
      }

      // 更新整体任务状态：如果所有子任务都不在处理中，则标记为完成
      const allSubTasksCompleted =
        (task.translationStatus === 'completed' || task.translationStatus === 'failed') &&
        (task.commentsStatus === 'completed' || task.commentsStatus === 'failed');

      if (allSubTasksCompleted) {
        task.status = 'completed';
      }

    } catch (error) {
      console.error(`[X Helper] 恢复任务 ${task.id} 状态失败:`, error);
      task.status = 'failed';
      task.error = '状态恢复失败';
    }
  };

  // 重试任务
  const retryTask = (task: ProcessTask) => {
    console.log('[X Helper] 重试任务:', task.id);
    setTweetUrl(task.tweetUrl);
    handleProcessTweet();
  };

  // 单独重试翻译
  const retryTranslation = async (task: ProcessTask) => {
    if (!task.tweetInfo?.content) {
      alert('缺少推文内容，无法进行翻译');
      return;
    }

    console.log('[X Helper] 单独重试翻译:', task.id);

    // 更新状态
    task.translationStatus = 'processing';
    setCurrentTask({ ...task });
    setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));

    try {
      const response = await fetch('/api/tweet-processor/translate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: task.tweetInfo.content,
          aiConfig: translationAIConfig
        })
      });

      const result = await response.json();
      console.log('[X Helper] 翻译重试结果:', result);

      if (result.success) {
        task.translationStatus = 'completed';
        task.translationResult = result.data;
      } else {
        task.translationStatus = 'failed';
        task.error = result.error?.message || '翻译失败';
      }

      setCurrentTask({ ...task });
      setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));

      // 更新localStorage
      if (mounted) {
        const updatedHistory = taskHistory.map(t => t.id === task.id ? task : t);
        localStorage.setItem('x-helper-task-history', JSON.stringify(updatedHistory));
      }

    } catch (error) {
      console.error('[X Helper] 翻译重试异常:', error);
      task.translationStatus = 'failed';
      task.error = '网络错误';
      setCurrentTask({ ...task });
      setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));
    }
  };

  // 单独重试评论
  const retryComments = async (task: ProcessTask) => {
    if (!task.tweetId) {
      alert('缺少推文ID，无法进行评论处理');
      return;
    }

    console.log('[X Helper] 单独重试评论:', task.id);

    // 更新状态
    task.commentsStatus = 'processing';
    setCurrentTask({ ...task });
    setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));

    try {
      // 先进行评论爬取
      const crawlResponse = await fetch('/api/tweet-processor/crawl-comments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': 'unicatcher-api-key-2024'
        },
        body: JSON.stringify({
          tweetId: task.tweetId,
          incremental: false,
          maxScrolls: 10
        })
      });

      const crawlResult = await crawlResponse.json();
      console.log('[X Helper] 评论爬取重试结果:', crawlResult);

      if (crawlResult.success) {
        // 轮询任务状态
        const pollResult = await pollTaskStatus(crawlResult.data.taskId);

        if (pollResult.success) {
          task.commentsResult = pollResult.data;

          // 生成评论
          const commentResult = await generateComments(task.tweetId, task.tweetInfo?.content || '');

          if (commentResult.success) {
            task.commentsStatus = 'completed';
            // 为了保持前端一致性，将comments重命名为generatedComments
            task.generatedCommentsResult = {
              ...commentResult.data,
              generatedComments: commentResult.data?.comments || []
            };
          } else {
            task.commentsStatus = 'failed';
            task.error = '评论生成失败';
          }
        } else {
          task.commentsStatus = 'failed';
          task.error = pollResult.error?.message || '评论爬取失败';
        }
      } else {
        task.commentsStatus = 'failed';
        task.error = crawlResult.error?.message || '评论爬取API调用失败';
      }

      setCurrentTask({ ...task });
      setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));

      // 更新localStorage
      if (mounted) {
        const updatedHistory = taskHistory.map(t => t.id === task.id ? task : t);
        localStorage.setItem('x-helper-task-history', JSON.stringify(updatedHistory));
      }

    } catch (error) {
      console.error('[X Helper] 评论重试异常:', error);
      task.commentsStatus = 'failed';
      task.error = '网络错误';
      setCurrentTask({ ...task });
      setTaskHistory(prev => prev.map(t => t.id === task.id ? task : t));
    }
  };

  // 清理任务（从历史中移除）
  const clearTask = (taskId: string) => {
    console.log('[X Helper] 清理任务:', taskId);
    const updatedHistory = taskHistory.filter(task => task.id !== taskId);
    setTaskHistory(updatedHistory);
    if (currentTask?.id === taskId) {
      setCurrentTask(null);
    }
  };

  // 选择任务
  const selectTask = (task: ProcessTask) => {
    setCurrentTask(task);
    setTweetUrl(task.tweetUrl);
  };

  const headerActions = (
    <button
      onClick={() => setShowAIConfig(true)}
      className="inline-flex items-center px-4 py-2 rounded-md bg-blue-600 text-white hover:bg-blue-700 transition-colors"
    >
      <span className="mr-2">⚙️</span>
      AI配置
    </button>
  );

  return (
    <DashboardLayout actions={headerActions}>
      {/* 恢复状态提示 */}
      {recoveryStatus && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div className="flex items-center">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-3"></div>
            <p className="text-blue-800">{recoveryStatus}</p>
          </div>
        </div>
      )}

      {/* 主处理区域 */}
      <div className="bg-white shadow rounded-lg p-6">
        <div className="space-y-4">
          {/* URL输入 */}
          <div>
            <input
              type="text"
              value={tweetUrl}
              onChange={(e) => setTweetUrl(e.target.value)}
              placeholder="输入推文URL (如: https://x.com/username/status/1234567890)"
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              disabled={isProcessing}
            />
          </div>

          {/* 处理按钮 */}
          <div>
            <button
              onClick={handleProcessTweet}
              disabled={isProcessing || !tweetUrl.trim()}
              className="w-full px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium"
            >
              {isProcessing ? '处理中...' : '处理'}
            </button>
          </div>
        </div>
      </div>

      {/* 当前任务展示区域 */}
      {currentTask && (
        <div className="bg-white shadow rounded-lg p-6">
          <div className="space-y-6">
            {/* 推文信息 */}
            {currentTask.tweetInfo && (
              <div className="border-b pb-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">推文信息</h3>
                <div className="flex items-start space-x-4">
                  {currentTask.tweetInfo.profileImageUrl && (
                    <img
                      src={currentTask.tweetInfo.profileImageUrl}
                      alt={currentTask.tweetInfo.userNickname}
                      className="w-12 h-12 rounded-full"
                    />
                  )}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="font-medium">{currentTask.tweetInfo.userNickname}</span>
                      <span className="text-gray-500">@{currentTask.tweetInfo.userUsername}</span>
                      <span className="text-gray-500">·</span>
                      <span className="text-gray-500">{currentTask.tweetInfo.publishedAtFormatted}</span>
                    </div>
                    <p className="text-gray-900 mb-3">{currentTask.tweetInfo.content}</p>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span>💬 {currentTask.tweetInfo.commentCount}</span>
                      <span>🔄 {currentTask.tweetInfo.retweetCount}</span>
                      <span>❤️ {currentTask.tweetInfo.likeCount}</span>
                      <span>👁️ {currentTask.tweetInfo.viewCount}</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* 处理状态 */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* 翻译状态 */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">翻译状态:</span>
                    <StatusBadge status={currentTask.translationStatus} />
                  </div>
                  {currentTask.translationStatus === 'failed' && (
                    <button
                      onClick={() => retryTranslation(currentTask)}
                      className="text-xs bg-blue-100 text-blue-700 px-3 py-1.5 rounded-md hover:bg-blue-200 transition-colors flex items-center space-x-1"
                      title="重试翻译"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      <span>重试</span>
                    </button>
                  )}
                </div>
                {currentTask.translationResult && (
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <p className="text-sm text-gray-600 mb-2">译文:</p>
                    <p className="text-gray-900">{currentTask.translationResult.translatedContent}</p>
                    {currentTask.translationResult.originalLanguage && (
                      <p className="text-xs text-gray-500 mt-2">
                        检测语言: {currentTask.translationResult.originalLanguage}
                      </p>
                    )}
                  </div>
                )}
              </div>

              {/* 评论状态 */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">评论状态:</span>
                    <StatusBadge status={currentTask.commentsStatus} />
                  </div>
                  {currentTask.commentsStatus === 'failed' && (
                    <button
                      onClick={() => retryComments(currentTask)}
                      className="text-xs bg-green-100 text-green-700 px-3 py-1.5 rounded-md hover:bg-green-200 transition-colors flex items-center space-x-1"
                      title="重试评论处理"
                    >
                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      <span>重试</span>
                    </button>
                  )}
                </div>
                {/* AI生成评论独立展示区域 */}
                {currentTask.generatedCommentsResult && currentTask.generatedCommentsResult.generatedComments && currentTask.generatedCommentsResult.generatedComments.length > 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-4">
                    <h3 className="text-lg font-medium text-blue-900 mb-4 flex items-center">
                      <span className="mr-2">🤖</span>
                      AI生成的参考评论 ({currentTask.generatedCommentsResult.generatedComments.length}条)
                    </h3>
                    <div className="space-y-4">
                      {currentTask.generatedCommentsResult.generatedComments.map((comment: any, index: number) => {
                        const commentText = typeof comment === 'string' ? comment : comment.content || comment.text || JSON.stringify(comment);
                        return (
                          <div key={index} className="bg-white border border-blue-200 rounded-lg p-4 shadow-sm">
                            <div className="flex items-start justify-between">
                              <div className="flex-1">
                                <div className="flex items-center mb-2">
                                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    评论 {index + 1}
                                  </span>
                                </div>
                                <p className="text-gray-900 whitespace-pre-wrap leading-relaxed">
                                  {commentText}
                                </p>
                              </div>
                              <button
                                onClick={() => navigator.clipboard.writeText(commentText)}
                                className="ml-4 flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
                                title="复制评论"
                              >
                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                    <div className="mt-4 p-3 bg-blue-100 rounded-lg">
                      <p className="text-sm text-blue-700">
                        💡 提示：这些是AI根据推文内容生成的参考评论，您可以直接使用或作为灵感进行修改。点击右上角的复制按钮可以快速复制评论内容。
                      </p>
                    </div>
                  </div>
                )}

                {currentTask.commentsResult && (
                  <div className="bg-green-50 p-4 rounded-lg space-y-3">
                    <div className="flex items-center justify-between">
                      <p className="text-sm text-gray-600">
                        获取评论: {currentTask.commentsResult.totalComments || 0} 条
                      </p>
                      {currentTask.commentsResult.comments && currentTask.commentsResult.comments.length > 0 && (
                        <span className="text-xs text-green-600">
                          ↓ 查看详细评论
                        </span>
                      )}
                    </div>

                    {/* 展示AI生成的评论 */}
                    {currentTask.generatedCommentsResult && currentTask.generatedCommentsResult.generatedComments && currentTask.generatedCommentsResult.generatedComments.length > 0 && (
                      <div className="space-y-2 mb-4">
                        <p className="text-xs text-gray-500 font-medium">AI生成的参考评论：</p>
                        {currentTask.generatedCommentsResult.generatedComments.map((comment: any, index: number) => {
                          const commentText = typeof comment === 'string' ? comment : comment.content || comment.text || JSON.stringify(comment);
                          return (
                            <div key={index} className="bg-blue-50 p-3 rounded border border-blue-200 text-sm">
                              <div className="flex items-start justify-between">
                                <div className="flex-1">
                                  <div className="flex items-center mb-1">
                                    <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      AI评论 {index + 1}
                                    </span>
                                  </div>
                                  <p className="text-gray-900 whitespace-pre-wrap leading-relaxed">
                                    {commentText}
                                  </p>
                                </div>
                                <button
                                  onClick={() => navigator.clipboard.writeText(commentText)}
                                  className="ml-2 flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
                                  title="复制评论"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                  </svg>
                                </button>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    )}

                    {/* 展示爬取的评论列表 */}
                    {currentTask.commentsResult.comments && currentTask.commentsResult.comments.length > 0 && (
                      <div className="space-y-2 max-h-64 overflow-y-auto">
                        <p className="text-xs text-gray-500 font-medium">爬取的评论内容：</p>
                        {currentTask.commentsResult.comments.slice(0, 5).map((comment: any, index: number) => (
                          <div key={index} className="bg-white p-3 rounded border border-green-200 text-sm">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-center space-x-2">
                                {comment.authorProfileImage && (
                                  <img
                                    src={comment.authorProfileImage}
                                    alt={comment.authorNickname}
                                    className="w-6 h-6 rounded-full"
                                  />
                                )}
                                <div>
                                  <span className="font-medium text-gray-900">
                                    {comment.authorNickname || comment.authorUsername || '匿名用户'}
                                  </span>
                                  {comment.authorUsername && (
                                    <span className="text-gray-500 text-xs ml-1">
                                      @{comment.authorUsername}
                                    </span>
                                  )}
                                </div>
                              </div>
                              <button
                                onClick={() => navigator.clipboard.writeText(comment.content || '')}
                                className="text-gray-400 hover:text-gray-600 transition-colors"
                                title="复制评论"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                            <p className="text-gray-800 leading-relaxed">
                              {comment.content || '无内容'}
                            </p>
                            <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                              {comment.likeCount !== undefined && (
                                <span>❤️ {comment.likeCount}</span>
                              )}
                              {comment.replyCount !== undefined && (
                                <span>💬 {comment.replyCount}</span>
                              )}
                              {comment.publishedAt && (
                                <span>{new Date(Number(comment.publishedAt)).toLocaleString('zh-CN', { month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</span>
                              )}
                            </div>
                          </div>
                        ))}
                        {currentTask.commentsResult.comments.length > 5 && (
                          <div className="text-center py-2">
                            <span className="text-xs text-gray-500">
                              …还有 {currentTask.commentsResult.comments.length - 5} 条评论未显示
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}
                {currentTask.generatedCommentsResult && (
                  <div className="bg-orange-50 p-4 rounded-lg">
                    <p className="text-sm text-gray-600">
                      AI生成评论: {currentTask.generatedCommentsResult.generatedComments?.length || 0} 条
                    </p>
                    <p className="text-xs text-orange-600 mt-1">
                      ↓ 详细内容请查看下方的“AI生成的参考评论”区域
                    </p>
                  </div>
                )}
              </div>
            </div>


            {/* 错误信息 */}
            {currentTask.error && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                <p className="text-red-800">{currentTask.error}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* 任务历史 */}
      {mounted && taskHistory.length > 0 && (
        <div className="bg-white shadow rounded-lg p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">处理历史</h3>
          <div className="space-y-3">
            {taskHistory.map((task) => (
              <div
                key={task.id}
                onClick={() => selectTask(task)}
                className={`p-4 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors ${
                  currentTask?.id === task.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                }`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <p className="font-medium text-gray-900 truncate">
                      {task.tweetInfo?.userNickname || task.tweetUrl}
                    </p>
                    <p className="text-sm text-gray-500">{task.startTime}</p>
                    {task.error && (
                      <p className="text-xs text-red-600 mt-1">错误: {task.error}</p>
                    )}
                  </div>
                  <div className="flex items-center space-x-2">
                    <StatusBadge status={task.translationStatus} size="sm" />
                    <StatusBadge status={task.commentsStatus} size="sm" />

                    {/* 操作按钮 */}
                    <div className="flex items-center space-x-1 ml-2">
                      {task.status === 'failed' && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            retryTask(task);
                          }}
                          className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200"
                          title="重试任务"
                        >
                          重试
                        </button>
                      )}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          clearTask(task.id);
                        }}
                        className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded hover:bg-gray-200"
                        title="从历史中移除"
                      >
                        清理
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* AI配置弹窗 */}
      {showAIConfig && (
        <AIConfigModal
          translationConfig={translationAIConfig}
          commentConfig={commentAIConfig}
          onTranslationConfigChange={setTranslationAIConfig}
          onCommentConfigChange={setCommentAIConfig}
          onSave={saveAIConfigs}
          onCancel={() => setShowAIConfig(false)}
        />
      )}
    </DashboardLayout>
  );
}

function StatusBadge({ status, size = 'md' }: { status: string; size?: 'sm' | 'md' }) {
  const sizeClasses = size === 'sm' ? 'px-2 py-1 text-xs' : 'px-3 py-1 text-sm';

  switch (status) {
    case 'pending':
      return <span className={`${sizeClasses} bg-gray-100 text-gray-700 rounded-full`}>待处理</span>;
    case 'processing':
      return <span className={`${sizeClasses} bg-blue-100 text-blue-700 rounded-full`}>处理中</span>;
    case 'completed':
      return <span className={`${sizeClasses} bg-green-100 text-green-700 rounded-full`}>完成</span>;
    case 'failed':
      return <span className={`${sizeClasses} bg-red-100 text-red-700 rounded-full`}>失败</span>;
    default:
      return <span className={`${sizeClasses} bg-gray-100 text-gray-700 rounded-full`}>未知</span>;
  }
}

function AIConfigModal({
  translationConfig,
  commentConfig,
  onTranslationConfigChange,
  onCommentConfigChange,
  onSave,
  onCancel
}: {
  translationConfig: AIConfig;
  commentConfig: AIConfig;
  onTranslationConfigChange: (config: AIConfig) => void;
  onCommentConfigChange: (config: AIConfig) => void;
  onSave: () => void;
  onCancel: () => void;
}) {
  // 根据供应商获取可选模型
  const getModelsForProvider = (provider: string) => {
    switch (provider) {
      case 'openai':
        return [
          { value: 'gpt-4o', label: 'GPT-4o' },
          { value: 'gpt-4', label: 'GPT-4' },
          { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' }
        ];
      case 'openai-badger':
        return [
          { value: 'gpt-4o-mini', label: 'GPT-4o Mini' },
          { value: 'gpt-4o', label: 'GPT-4o' },
          { value: 'gpt-4', label: 'GPT-4' },
          { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' }
        ];
      case 'zhipu':
        return [
          { value: 'glm-4.5-flash', label: 'GLM-4.5-Flash' },
          { value: 'glm-4.5', label: 'GLM-4.5' },
          { value: 'glm-4.5-air', label: 'GLM-4.5-Air' }
        ];
      default:
        return [];
    }
  };

  // 获取供应商的默认模型
  const getDefaultModelForProvider = (provider: string) => {
    switch (provider) {
      case 'openai':
        return 'gpt-4o';
      case 'openai-badger':
        return 'gpt-4o-mini';
      case 'zhipu':
        return 'glm-4.5-flash';
      default:
        return '';
    }
  };

  // 处理翻译AI供应商变更
  const handleTranslationProviderChange = (provider: string) => {
    const defaultModel = getDefaultModelForProvider(provider);
    onTranslationConfigChange({
      ...translationConfig,
      provider: provider as AIConfig['provider'],
      model: defaultModel
    });
  };

  // 处理评论AI供应商变更
  const handleCommentProviderChange = (provider: string) => {
    const defaultModel = getDefaultModelForProvider(provider);
    onCommentConfigChange({
      ...commentConfig,
      provider: provider as AIConfig['provider'],
      model: defaultModel
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-y-auto">
        <h3 className="text-lg font-semibold mb-6">AI配置</h3>

        <div className="space-y-8">
          {/* 翻译AI配置 */}
          <div>
            <h4 className="text-md font-medium mb-4">翻译AI</h4>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">API密钥</label>
                <input
                  type="password"
                  value={translationConfig.apiKey}
                  onChange={(e) => onTranslationConfigChange({ ...translationConfig, apiKey: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="输入翻译API密钥"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">供应商</label>
                <select
                  value={translationConfig.provider}
                  onChange={(e) => handleTranslationProviderChange(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="openai">OpenAI</option>
                  <option value="openai-badger">OpenAI-Badger</option>
                  <option value="zhipu">智谱AI (GLM)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">模型</label>
                <select
                  value={translationConfig.model}
                  onChange={(e) => onTranslationConfigChange({ ...translationConfig, model: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {getModelsForProvider(translationConfig.provider).map(model => (
                    <option key={model.value} value={model.value}>{model.label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">基础URL (可选)</label>
                <input
                  type="url"
                  value={translationConfig.baseURL || ''}
                  onChange={(e) => onTranslationConfigChange({ ...translationConfig, baseURL: e.target.value || undefined })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="自定义API端点URL"
                />
              </div>
            </div>
          </div>

          {/* 评论AI配置 */}
          <div>
            <h4 className="text-md font-medium mb-4">评论AI</h4>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">API密钥</label>
                <input
                  type="password"
                  value={commentConfig.apiKey}
                  onChange={(e) => onCommentConfigChange({ ...commentConfig, apiKey: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="输入评论API密钥"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">供应商</label>
                <select
                  value={commentConfig.provider}
                  onChange={(e) => handleCommentProviderChange(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="openai">OpenAI</option>
                  <option value="openai-badger">OpenAI-Badger</option>
                  <option value="zhipu">智谱AI (GLM)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">模型</label>
                <select
                  value={commentConfig.model}
                  onChange={(e) => onCommentConfigChange({ ...commentConfig, model: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {getModelsForProvider(commentConfig.provider).map(model => (
                    <option key={model.value} value={model.value}>{model.label}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">基础URL (可选)</label>
                <input
                  type="url"
                  value={commentConfig.baseURL || ''}
                  onChange={(e) => onCommentConfigChange({ ...commentConfig, baseURL: e.target.value || undefined })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="自定义API端点URL"
                />
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-end space-x-3 mt-8">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            取消
          </button>
          <button
            onClick={onSave}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
          >
            保存配置
          </button>
        </div>
      </div>
    </div>
  );
}